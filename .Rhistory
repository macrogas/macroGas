par(mfrow=c(2,2))
plot1 <- ggplot(data = df, mapping = aes(x = DO)) +
geom_density()
plot2 <- ggplot(data = df, mapping = aes(x = log(DO))) +
geom_density()
plot3 <- ggplot(data = df, mapping = aes(x = Temp_C)) +
geom_density()
plot4 <- ggplot(data = df, mapping = aes(x = DO, y = Temp_C)) +
geom_point()
plot5 <- ggplot(data = df, mapping = aes(x = DO, y = apiData$hourly.temperature_2m)) +
geom_point()
plot6 <- ggplot(data = df, mapping = aes(x = DO, y = apiData$hourly.rain)) +
geom_point()
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=2, nrow=3)
library("DMwR2")
combined_df[c(700:800),'DO'] <- NA
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
df <- read.csv("gas_app/ex_with_do_df.csv", header = F)
df  <- df[-c(1,2),c(1,2,3,4)]
colnames(df) <- c("id", "Date_Time", "DO", "Temp_C")
df <- df[df$DO != '',]
df$DO <- as.numeric(df$DO)
df$Temp_C = as.numeric(df$Temp_C)
df <- df %>% mutate(Date_Time = parse_date_time(Date_Time, "%m/%d/%y %I:%M:%S %p"))
start_day <- str_split(min(df$Date_Time),pattern = ' ')[[1]][1]
end_day <- str_split(max(df$Date_Time),pattern = ' ')[[1]][1]
print(start_day)
print(end_day)
api_url <- paste0("https://archive-api.open-meteo.com/v1/archive?latitude=35.980472&longitude=-79.004672&start_date=",
start_day,
"&end_date=",
end_day,
"&hourly=temperature_2m,relativehumidity_2m,rain,snowfall,cloudcover,windspeed_10m,is_day,direct_radiation&timezone=America%2FNew_York&models=best_match")
res = GET(api_url)
apiData = as.data.frame(fromJSON(rawToChar(res$content)))
print(names(apiData))
par(mfrow=c(2,2))
plot1 <- ggplot(data = df, mapping = aes(x = DO)) +
geom_density()
plot2 <- ggplot(data = df, mapping = aes(x = log(DO))) +
geom_density()
plot3 <- ggplot(data = df, mapping = aes(x = Temp_C)) +
geom_density()
plot4 <- ggplot(data = df, mapping = aes(x = DO, y = Temp_C)) +
geom_point()
plot5 <- ggplot(data = df, mapping = aes(x = DO, y = apiData$hourly.temperature_2m)) +
geom_point()
plot6 <- ggplot(data = df, mapping = aes(x = DO, y = apiData$hourly.rain)) +
geom_point()
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=2, nrow=3)
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
par(mfrow=c(2,2))
plot(density(df$DO))
plot(density(log(df$DO)))
plot(density(df$Temp_C))
plot(df$Temp, df$DO)
new_df = df[726:2698,]
new_data = data[0:494,]
new_data = new_data[rep(seq_len(nrow(new_data)), each = 4), ]
new_data = new_data[0:1973,]
colnames(new_df) <- c("number", "date", "DO", "Temp")
new_df <- new_df[new_df$DO != '',]
DO = as.numeric(new_df$DO)
new_df$DO = DO
Time = new_df$date
Time = strsplit(Time, " ")
combined_df = cbind(new_df, new_data)
combined_df = combined_df[,c(3:5,23:25,27:30)]
library("DMwR2")
combined_df[c(700:800),'DO'] <- NA
filled_df <- knnImputation(combined_df[c(1:3,5,6,9,10)])
par(mfrow=c(2,2))
plot1 <- ggplot(data = df, mapping = aes(x = DO)) +
geom_density()
plot2 <- ggplot(data = df, mapping = aes(x = log(DO))) +
geom_density()
plot3 <- ggplot(data = df, mapping = aes(x = Temp_C)) +
geom_density()
plot4 <- ggplot(data = df, mapping = aes(x = DO, y = Temp_C)) +
geom_point()
# plot5 <- ggplot(data = df, mapping = aes(x = DO, y = apiData$hourly.temperature_2m)) +
#   geom_point()
#
# plot6 <- ggplot(data = df, mapping = aes(x = DO, y = apiData$hourly.rain)) +
#   geom_point()
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=2, nrow=3)
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
ta$hourly.temperature_2m)) +
par(mfrow=c(2,2))
plot1 <- ggplot(data = df, mapping = aes(x = DO)) +
geom_density()
plot2 <- ggplot(data = df, mapping = aes(x = log(DO))) +
geom_density()
plot3 <- ggplot(data = df, mapping = aes(x = Temp_C)) +
geom_density()
plot4 <- ggplot(data = df, mapping = aes(x = DO, y = Temp_C)) +
geom_point()
# plot5 <- ggplot(data = df, mapping = aes(x = DO, y = apiData$hourly.temperature_2m)) +
#   geom_point()
#
# plot6 <- ggplot(data = df, mapping = aes(x = DO, y = apiData$hourly.rain)) +
#   geom_point()
grid.arrange(plot1, plot2, plot3, plot4, ncol=2, nrow=2)
par(mfrow=c(2,2))
plot(density(df$DO))
plot(density(log(df$DO)))
plot(density(df$Temp_C))
plot(df$Temp, df$DO)
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
new_df = df[726:2698,]
new_data = data[0:494,]
new_data = new_data[rep(seq_len(nrow(new_data)), each = 4), ]
new_data = new_data[0:1973,]
colnames(new_df) <- c("number", "date", "DO", "Temp")
new_df <- new_df[new_df$DO != '',]
DO = as.numeric(new_df$DO)
new_df$DO = DO
Time = new_df$date
Time = strsplit(Time, " ")
new_df = df[726:2698,]
new_data = data[0:494,]
new_data = new_data[rep(seq_len(nrow(new_data)), each = 4), ]
new_data = new_data[0:1973,]
colnames(new_df) <- c("number", "date", "DO", "Temp")
new_df <- new_df[new_df$DO != '',]
DO = as.numeric(new_df$DO)
new_df$DO = DO
Time = new_df$date
Time = strsplit(Time, " ")
View(new_df)
View(new_df)
View(df)
View(new_df)
df <- read.csv("gas_app/ex_with_do_df.csv", header = F)
df  <- df[-c(1,2),c(1,2,3,4)]
colnames(df) <- c("id", "Date_Time", "DO", "Temp_C")
df <- df[df$DO != '',]
df$DO <- as.numeric(df$DO)
df$Temp_C = as.numeric(df$Temp_C)
#df <- df %>% mutate(Date_Time = parse_date_time(Date_Time, "%m/%d/%y %I:%M:%S %p"))
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
new_df = df[726:2698,]
new_data = data[0:494,]
new_data = new_data[rep(seq_len(nrow(new_data)), each = 4), ]
new_data = new_data[0:1973,]
colnames(new_df) <- c("number", "date", "DO", "Temp")
new_df <- new_df[new_df$DO != '',]
DO = as.numeric(new_df$DO)
new_df$DO = DO
Time = new_df$date
Time = strsplit(Time, " ")
Ex_Time <- c()
for(i in 1:length(Time)){
AM_PM = Time[[i]][3]
Temp_Time = strsplit(Time[[i]][2], ":")
H = as.numeric(Temp_Time[[1]][1])
M = as.numeric(Temp_Time[[1]][2])
S = as.numeric(Temp_Time[[1]][3])
if(H == 12){
H = H - 12
}
if(AM_PM=="PM")
H = H + 12
Ex_Time[i] = 60*H + M + S/60
}
plot(Ex_Time, DO)
new_df$Time = Ex_Time
df <- read.csv("gas_app/ex_with_do_df.csv", header = F)
df  <- df[-c(1,2),c(1,2,3,4)]
colnames(df) <- c("id", "Date_Time", "DO", "Temp_C")
df <- df[df$DO != '',]
df$DO <- as.numeric(df$DO)
df$Temp_C = as.numeric(df$Temp_C)
df <- df %>% mutate(Date_Time = parse_date_time(Date_Time, "%m/%d/%y %I:%M:%S %p"))
View(df)
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
temp_DO <- test_df$DO
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
combined_df = cbind(new_df, new_data)
combined_df = combined_df[,c(3:5,23:25,27:30)]
train_index = c(1:699,800:1973)
train_df = combined_df[train_index,]
test_df = combined_df[-train_index,]
p1 <- ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = test_df$DO), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("original")
p1
library("DMwR2")
combined_df[c(700:800),'DO'] <- NA
filled_df <- knnImputation(combined_df[c(1:3,5,6,9,10)])
ggplot()+
geom_point(aes(x = filled_df$Time[-c(700:800)], y = filled_df$DO[-c(700:800)]), color='grey')+
geom_point(aes(x = filled_df$Time[c(700:800)], y = filled_df$DO[c(700:800)]), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("KNN")
temp_DO <- test_df$DO
test_df$DO <- NA
fit1 <- lm(DO ~ ., data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("linear Regression with all")
p2
mean_rep = train_df %>%
group_by(Time) %>%
summarise(mean_DO = mean(DO))
pred2 <- c()
for(i in 1:100){
pred_Time = test_df$Time[i]
pred2[i] <- mean_rep[mean_rep$Time==pred_Time,]$mean_DO
}
p3 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = pred2), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Mean")
p3
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
geom_point(aes(x = test_df$Time, y = test_df$DO), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("linear Regression with all")
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
temp_DO <- test_df$DO
test_df$DO <- NA
fit1 <- lm(DO ~ ., data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
geom_point(aes(x = test_df$Time, y = test_df$DO), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("linear Regression with all")
p2
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
fit1 <- lm(DO ~ ., data = train_df)
temp_DO <- test_df$DO
fit1 <- lm(DO ~ ., data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
geom_point(aes(x = test_df$Time, y = test_df$DO), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("linear Regression with all")
p2
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
temp_DO <- test_df$DO
fit1 <- lm(DO ~ ., data = train_df)
pred1 <- predict(fit1, newdata = NA)
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
temp_DO <- test_df$DO
fr <- test_df$DO
test_df$DO <- NA
fit1 <- lm(DO ~ ., data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
geom_point(aes(x = test_df$Time, y = fr), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("linear Regression with all")
p2
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
temp_DO <- test_df$DO
fr <- test_df$DO
test_df$DO <- NA
fit1 <- lm(DO ~ ., data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
geom_point(aes(x = test_df$Time, y = 1), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("linear Regression with all")
p2
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
temp_DO <- test_df$DO
fr <- test_df$DO
test_df$DO <- NA
fit1 <- lm(DO ~ ., data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
geom_point(aes(x = test_df$Time, y = fr), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("linear Regression with all")
p2
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
temp_DO <- test_df$DO
test_df$DO <- NA
fit1 <- lm(DO ~ ., data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
geom_point(aes(x = test_df$Time, y = temp_DO), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("linear Regression with all")
p2
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
temp_DO <- test_df$DO
print(temp_DO)
test_df$DO <- NA
fit1 <- lm(DO ~ ., data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
geom_point(aes(x = test_df$Time, y = temp_DO), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("linear Regression with all")
p2
combined_df = cbind(new_df, new_data)
combined_df = combined_df[,c(3:5,23:25,27:30)]
train_index = c(1:699,800:1973)
train_df = combined_df[train_index,]
test_df = combined_df[-train_index,]
p1 <- ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = test_df$DO), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("original")
p1
library("DMwR2")
combined_df[c(700:800),'DO'] <- NA
filled_df <- knnImputation(combined_df[c(1:3,5,6,9,10)])
ggplot()+
geom_point(aes(x = filled_df$Time[-c(700:800)], y = filled_df$DO[-c(700:800)]), color='grey')+
geom_point(aes(x = filled_df$Time[c(700:800)], y = filled_df$DO[c(700:800)]), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("KNN")
temp_DO <- test_df$DO
print(temp_DO)
test_df$DO <- NA
fit1 <- lm(DO ~ ., data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
geom_point(aes(x = test_df$Time, y = temp_DO), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("linear Regression with all")
p2
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
mean_rep = train_df %>%
group_by(Time) %>%
summarise(mean_DO = mean(DO))
pred2 <- c()
for(i in 1:100){
pred_Time = test_df$Time[i]
pred2[i] <- mean_rep[mean_rep$Time==pred_Time,]$mean_DO
}
p3 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = pred2), color = "red")+
geom_point(aes(x = test_df$Time, y = temp_DO), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Mean")
p3
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
combined_df = cbind(new_df, new_data)
combined_df = combined_df[,c(3:5,23:25,27:30)]
train_index = c(1:699,800:1973)
train_df = combined_df[train_index,]
test_df = combined_df[-train_index,]
temp_DO <- test_df$DO
p1 <- ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = test_df$DO), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("original")
p1
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
combined_df = cbind(new_df, new_data)
combined_df = combined_df[,c(3:5,23:25,27:30)]
train_index = c(1:699,800:1973)
train_df = combined_df[train_index,]
test_df = combined_df[-train_index,]
temp_DO <- test_df$DO
p1 <- ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = test_df$DO), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("original")
p1
library(httr)
library(jsonlite)
library(tidyverse)
library(gridExtra)
library(lubridate)
library("DMwR2")
combined_df[c(700:800),'DO'] <- NA
filled_df <- knnImputation(combined_df[c(1:3,5,6,9,10)])
ggplot()+
geom_point(aes(x = filled_df$Time[-c(700:800)], y = filled_df$DO[-c(700:800)]), color='grey')+
geom_point(aes(x = filled_df$Time[c(700:800)], y = filled_df$DO[c(700:800)]), color = "red")+
geom_point(aes(x = test_df$Time, y = temp_DO), color = "blue")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("KNN")
library(shiny); runApp('gas_app/gasapp.R')
runApp('gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(lubridate)
p4 = ggplot()+
geom_point(aes(x = filled_df$Time[-c(500:600)], y = filled_df$DO[-c(500:600)]), color='grey')+
geom_point(aes(x = filled_df$Time[c(500:600)], y = filled_df$DO[c(500:600)]), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("KNN")
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Quadratic Regression")
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
