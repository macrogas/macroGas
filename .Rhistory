install.packages("StreamMetabolizer")
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('salt_slug_app/R-stuff')
runApp('gas_app/gasapp.R')
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
install.packages("tags")
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
library(shiny); runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(lubridate)
df <- read.csv("NC_NHC_2023-03-06_HD.csv", header = F)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(lubridate)
df <- read.csv("NC_NHC_2023-03-06_HD.csv", header = F)
df <- read.csv("erwin_downstream.csv", header = F)
df  <- df[-c(1,2, 1325, 1326, 1327),c(1,2,3,4)]
colnames(df) <- c("number", "date", "DO", "Temp")
par(mfrow=c(2,2))
df$DO = as.numeric(df$DO)
Temp = as.numeric(df$Temp)
plot(density(DO))
df <- read.csv("ex_with_do_df.csv", header = F)
df  <- df[-c(1,2, 1325, 1326, 1327),c(1,2,3,4)]
colnames(df) <- c("number", "date", "DO", "Temp")
par(mfrow=c(2,2))
df$DO = as.numeric(df$DO)
Temp = as.numeric(df$Temp)
plot(density(DO))
df <- read.csv("ex_with_do_df.csv", header = F)
df  <- df[-c(1,2, 1325, 1326, 1327),c(1,2,3)]
colnames(df) <- c("date", "DO", "Temp")
par(mfrow=c(2,2))
df$DO = as.numeric(df$DO)
Temp = as.numeric(df$Temp)
plot(density(DO))
df <- read.csv("ex_with_do_df.csv", header = F)
df  <- df[-c(1,2, 1325, 1326, 1327),c(1,2,3)]
colnames(df) <- c("date", "DO", "Temp")
View(df)
df <- read.csv("ex_with_do_df.csv", header = F)
df  <- df[-c(1,2, 1325, 1326, 1327),c(1,2,3,4)]
colnames(df) <- c("number", "date", "DO", "Temp")
View(df)
par(mfrow=c(2,2))
df$DO = as.numeric(df$DO)
Temp = as.numeric(df$Temp)
plot(density(DO))
df <- read.csv("ex_with_do_df.csv", header = F)
df  <- df[-c(1,2, 1325, 1326, 1327),c(1,2,3,4)]
colnames(df) <- c("number", "date", "DO", "Temp")
View(df)
par(mfrow=c(2,2))
df$DO = as.numeric(df$DO)
Temp = as.numeric(df$Temp)
plot(density(DO))
par(mfrow=c(2,2))
df$DO = as.numeric(df$DO)
Temp = as.numeric(df$Temp)
plot(density(df$DO))
par(mfrow=c(2,2))
DO = as.numeric(df$DO)
df$DO = DO
Temp = as.numeric(df$Temp)
plot(density(DO))
df <- read.csv("ex_with_do_df.csv", header = F)
df  <- df[-c(1,2, 1325, 1326, 1327),c(1,2,3,4)]
colnames(df) <- c("number", "date", "DO", "Temp")
View(df)
df <- read.csv("ex_with_do_df.csv", header = F)
df  <- df[-c(1,2, 1325, 1326, 1327),c(1,2,3,4)]
colnames(df) <- c("number", "date", "DO", "Temp")
df <- df[!is.na(df$DO),]
View(df)
df <- read.csv("ex_with_do_df.csv", header = F)
df  <- df[-c(1,2, 1325, 1326, 1327),c(1,2,3,4)]
colnames(df) <- c("number", "date", "DO", "Temp")
df <- df[df$DO != '',]
View(df)
par(mfrow=c(2,2))
DO = as.numeric(df$DO)
df$DO = DO
Temp = as.numeric(df$Temp)
plot(density(DO))
plot(density(log(DO)))
plot(density(Temp))
plot(Temp, DO)
Time = df$date
Time = strsplit(Time, " ")
Ex_Time <- c()
for(i in 1:length(Time)){
AM_PM = Time[[i]][3]
Temp_Time = strsplit(Time[[i]][2], ":")
H = as.numeric(Temp_Time[[1]][1])
M = as.numeric(Temp_Time[[1]][2])
S = as.numeric(Temp_Time[[1]][3])
if(H == 12){
H = H - 12
}
if(AM_PM=="PM")
H = H + 12
Ex_Time[i] = 60*H + M + S
}
plot(Ex_Time, DO)
df$Time = Ex_Time
# manually delete some data
train_index = c(1:499,600:1322)
train_df = df[train_index, 3:5]
test_df = df[-train_index, 3:5]
p1 <- ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = test_df$DO), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("original")
p1
temp_DO <- test_df$DO
test_df$DO <- NA
fit1 <- lm(DO ~ Time + I(Time^2), data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Quadratic Regression")
mean_rep = train_df %>%
group_by(Time) %>%
summarise(mean_DO = mean(DO))
pred2 <- c()
for(i in 1:100){
pred_Time = test_df$Time[i]
pred2[i] <- mean_rep[mean_rep$Time==pred_Time,]$mean_DO
}
p3 = ggplot()+
geom_point(aes(x = df$Time, y = df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = pred2), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Mean")
library("DMwR2")
df_test <- df[,3:5]
df_test[c(500:600),'DO'] <- NA
filled_df <- knnImputation(df_test)
p4 = ggplot()+
geom_point(aes(x = filled_df$Time[-c(200:300)], y = filled_df$DO[-c(200:300)]), color='grey')+
geom_point(aes(x = filled_df$Time[c(200:300)], y = filled_df$DO[c(200:300)]), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("KNN")
runApp('salt_slug_app/R-stuff')
library(gridExtra)
library(grid)
test_df$DO <- temp_DO
grid.arrange(p1, p2, p3, p4, ncol=2)
Time = df$date
print(Time)
Time = strsplit(Time, " ")
Ex_Time <- c()
for(i in 1:length(Time)){
AM_PM = Time[[i]][3]
Temp_Time = strsplit(Time[[i]][2], ":")
H = as.numeric(Temp_Time[[1]][1])
M = as.numeric(Temp_Time[[1]][2])
S = as.numeric(Temp_Time[[1]][3])
if(H == 12){
H = H - 12
}
if(AM_PM=="PM")
H = H + 12
Ex_Time[i] = 60*H + M + S
}
plot(Ex_Time, DO)
df$Time = Ex_Time
Time = df$date
Time = strsplit(Time, " ")
Ex_Time <- c()
for(i in 1:length(Time)){
AM_PM = Time[[i]][3]
Temp_Time = strsplit(Time[[i]][2], ":")
H = as.numeric(Temp_Time[[1]][1])
M = as.numeric(Temp_Time[[1]][2])
S = as.numeric(Temp_Time[[1]][3])
if(H == 12){
H = H - 12
}
if(AM_PM=="PM")
H = H + 12
Ex_Time[i] = 3600*H + 60*M + S
}
plot(Ex_Time, DO)
df$Time = Ex_Time
Time = df$date
Time = strsplit(Time, " ")
Ex_Time <- c()
for(i in 1:length(Time)){
AM_PM = Time[[i]][3]
Temp_Time = strsplit(Time[[i]][2], ":")
H = as.numeric(Temp_Time[[1]][1])
M = as.numeric(Temp_Time[[1]][2])
S = as.numeric(Temp_Time[[1]][3])
if(H == 12){
H = H - 12
}
if(AM_PM=="PM")
H = H + 12
Ex_Time[i] = 60*H + M + S/60
}
plot(Ex_Time, DO)
df$Time = Ex_Time
library("DMwR2")
df_test <- df[,3:5]
df_test[c(500:600),'DO'] <- NA
filled_df <- knnImputation(df_test)
p4 = ggplot()+
geom_point(aes(x = filled_df$Time[-c(200:300)], y = filled_df$DO[-c(200:300)]), color='grey')+
geom_point(aes(x = filled_df$Time[c(200:300)], y = filled_df$DO[c(200:300)]), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("KNN")
library("DMwR2")
df_test <- df[,3:5]
df_test[c(500:600),'DO'] <- NA
filled_df <- knnImputation(df_test)
p4 = ggplot()+
geom_point(aes(x = filled_df$Time[-c(200:300)], y = filled_df$DO[-c(200:300)]), color='grey')+
geom_point(aes(x = filled_df$Time[c(200:300)], y = filled_df$DO[c(200:300)]), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("KNN")
mean_rep = train_df %>%
group_by(Time) %>%
summarise(mean_DO = mean(DO))
pred2 <- c()
for(i in 1:100){
pred_Time = test_df$Time[i]
pred2[i] <- mean_rep[mean_rep$Time==pred_Time,]$mean_DO
}
p3 = ggplot()+
geom_point(aes(x = df$Time, y = df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = pred2), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Mean")
library("DMwR2")
df_test <- df[,3:5]
df_test[c(500:600),'DO'] <- NA
filled_df <- knnImputation(df_test)
p4 = ggplot()+
geom_point(aes(x = filled_df$Time[-c(200:300)], y = filled_df$DO[-c(200:300)]), color='grey')+
geom_point(aes(x = filled_df$Time[c(200:300)], y = filled_df$DO[c(200:300)]), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("KNN")
mean_rep = train_df %>%
group_by(Time) %>%
summarise(mean_DO = mean(DO))
pred2 <- c()
for(i in 1:100){
pred_Time = test_df$Time[i]
pred2[i] <- mean_rep[mean_rep$Time==pred_Time,]$mean_DO
}
p3 = ggplot()+
geom_point(aes(x = df$Time, y = df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = pred2), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Mean")
temp_DO <- test_df$DO
test_df$DO <- NA
fit1 <- lm(DO ~ Time + I(Time^2), data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Quadratic Regression")
temp_DO <- test_df$DO
test_df$DO <- NA
fit1 <- lm(DO ~ Time + I(Time^2), data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Quadratic Regression")
p2
mean_rep = train_df %>%
group_by(Time) %>%
summarise(mean_DO = mean(DO))
pred2 <- c()
for(i in 1:100){
pred_Time = test_df$Time[i]
pred2[i] <- mean_rep[mean_rep$Time==pred_Time,]$mean_DO
}
p3 = ggplot()+
geom_point(aes(x = df$Time, y = df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = pred2), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Mean")
p3
library("DMwR2")
df_test <- df[,3:5]
df_test[c(500:600),'DO'] <- NA
filled_df <- knnImputation(df_test)
p4 = ggplot()+
geom_point(aes(x = filled_df$Time[-c(200:300)], y = filled_df$DO[-c(200:300)]), color='grey')+
geom_point(aes(x = filled_df$Time[c(200:300)], y = filled_df$DO[c(200:300)]), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("KNN")
p4
library(httr)
library(jsonlite)
library(tidyverse)
ggplot(data = data, mapping = aes(x = hourly.time, y = hourly.is_day)) +
geom_point()
library(httr)
library(jsonlite)
library(tidyverse)
mean_rep = train_df %>%
group_by(Time) %>%
summarise(mean_DO = mean(DO))
library(httr)
library(jsonlite)
library(tidyverse)
res = GET("https://archive-api.open-meteo.com/v1/archive?latitude=35.3268&longitude=-78.6761&start_date=2023-06-08&end_date=2023-07-22&hourly=temperature_2m,relativehumidity_2m,rain,snowfall,cloudcover,windspeed_10m,is_day,direct_radiation&timezone=America%2FNew_York")
data = as.data.frame(fromJSON(rawToChar(res$content)))
print(names(data))
df <- read.csv("gas_app/ex_with_do_df.csv", header = F)
df  <- df[-c(1,2),c(1,2,3,4)]
colnames(df) <- c("id", "Date_Time", "DO", "Temp_C")
df <- df[df$DO != '',]
View(df)
ggplot(data = data, mapping = aes(x = hourly.time, y = hourly.is_day)) +
geom_point()
ggplot(data = data, mapping = aes(x = hourly.time, y = hourly.rain)) +
geom_point()
ggplot(data = data, mapping = aes(x = hourly.time, y = hourly.temperature_2m)) +
geom_point()
ggplot(data = data, mapping = aes(x = hourly.time, y = hourly.direct_radiation)) +
geom_point()
ggplot(data = data, mapping = aes(x = hourly.time, y = hourly.windspeed_10m)) +
geom_point()
ggplot(data = data, mapping = aes(x = hourly.time, y = hourly.cloudcover)) +
geom_point()
new_df = df[726:2698,]
new_data = data[0:494,]
new_data = new_data[rep(seq_len(nrow(new_data)), each = 4), ]
new_data = new_data[0:1973,]
colnames(new_df) <- c("number", "date", "DO", "Temp")
new_df <- new_df[new_df$DO != '',]
DO = as.numeric(new_df$DO)
new_df$DO = DO
Time = new_df$date
Time = strsplit(Time, " ")
Ex_Time <- c()
for(i in 1:length(Time)){
AM_PM = Time[[i]][3]
Temp_Time = strsplit(Time[[i]][2], ":")
H = as.numeric(Temp_Time[[1]][1])
M = as.numeric(Temp_Time[[1]][2])
S = as.numeric(Temp_Time[[1]][3])
if(H == 12){
H = H - 12
}
if(AM_PM=="PM")
H = H + 12
Ex_Time[i] = 60*H + M + S/60
}
plot(Ex_Time, DO)
new_df$Time = Ex_Time
combined_df = cbind(new_df, new_data)
combined_df = combined_df[,c(3:5,23:25,27:30)]
train_index = c(1:699,800:1973)
train_df = combined_df[train_index,]
test_df = combined_df[-train_index,]
p1 <- ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = test_df$DO), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("original")
p1
library("DMwR2")
combined_df[c(700:800),'DO'] <- NA
filled_df <- knnImputation(combined_df[c(1:3,5,6,9,10)])
ggplot()+
geom_point(aes(x = filled_df$Time[-c(700:800)], y = filled_df$DO[-c(700:800)]), color='grey')+
geom_point(aes(x = filled_df$Time[c(700:800)], y = filled_df$DO[c(700:800)]), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("KNN")
temp_DO <- test_df$DO
test_df$DO <- NA
fit1 <- lm(DO ~ ., data = train_df)
pred1 <- predict(fit1, newdata = test_df)
p2 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color="grey")+
geom_point(aes(x = test_df$Time, y = pred1), color="red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Quadratic Regression")
p2
mean_rep = train_df %>%
group_by(Time) %>%
summarise(mean_DO = mean(DO))
pred2 <- c()
for(i in 1:100){
pred_Time = test_df$Time[i]
pred2[i] <- mean_rep[mean_rep$Time==pred_Time,]$mean_DO
}
p3 = ggplot()+
geom_point(aes(x = df$Time, y = df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = pred2), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Mean")
p3
library(httr)
library(jsonlite)
library(tidyverse)
mean_rep = train_df %>%
group_by(Time) %>%
summarise(mean_DO = mean(DO))
pred2 <- c()
for(i in 1:100){
pred_Time = test_df$Time[i]
pred2[i] <- mean_rep[mean_rep$Time==pred_Time,]$mean_DO
}
p3 = ggplot()+
geom_point(aes(x = train_df$Time, y = df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = pred2), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Mean")
p3
View(new_data)
combined_df = cbind(new_df, new_data)
combined_df = combined_df[,c(3:5,23:25,27:30)]
train_index = c(1:699,800:1973)
train_df = combined_df[train_index,]
test_df = combined_df[-train_index,]
p1 <- ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = test_df$DO), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("original")
p1
mean_rep = train_df %>%
group_by(Time) %>%
summarise(mean_DO = mean(DO))
pred2 <- c()
for(i in 1:100){
pred_Time = test_df$Time[i]
pred2[i] <- mean_rep[mean_rep$Time==pred_Time,]$mean_DO
}
p3 = ggplot()+
geom_point(aes(x = train_df$Time, y = df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = pred2), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Mean")
p3
View(mean_rep)
library(httr)
library(jsonlite)
library(tidyverse)
mean_rep = train_df %>%
group_by(Time) %>%
summarise(mean_DO = mean(DO))
pred2 <- c()
for(i in 1:100){
pred_Time = test_df$Time[i]
pred2[i] <- mean_rep[mean_rep$Time==pred_Time,]$mean_DO
}
p3 = ggplot()+
geom_point(aes(x = train_df$Time, y = train_df$DO), color='grey')+
geom_point(aes(x = test_df$Time, y = pred2), color = "red")+
labs(x="Time in a day(Min)", y="DO")+
ggtitle("Mean")
p3
