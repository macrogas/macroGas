#expands range to include nearby points as well
distance_threshold <- 20
nearby_points <- B_sf %>%
st_join(A_sf, join = st_nearest_feature, dist = distance_threshold)
nearby_points <- as.data.frame(nearby_points)
view(nearby_points)
nearby_points[, -geometry]
view(nearby_points)
nearby_points[, -which(names(nearby_points) == geometry)]
nearby_points[, -which(names(nearby_points) == 'geometry')]
names(nearby_points)
view(nearby_points)
#expands range to include nearby points as well
distance_threshold <- 20
nearby_points <- station1_slug[TRUE,]
view(nearby_points)
nearby_points <- station1_slug[id < 990,]
nearby_points <- station1_slug[station1_slug$id < 990,]
view(nearby_points)
view(nearby_points)
nearby_points <- station1_slug[station1_slug$Date_Time < selected_points,]
view(nearby_points)
combined_selected <- rbind(selected_points, nearby_points)
#plots data
x <- nearby_points$Date_Time
y <- nearby_points$Low_Range
plot(x,y)
nearby_points <- station1_slug[station1_slug$Date_Time > selected_points,]
view(nearby_points)
#plots data
x <- nearby_points$Date_Time
y <- nearby_points$Low_Range
plot(x,y)
nearby_points <- station1_slug[station1_slug$Date_Time > selected_points$Date_Time,]
#view(nearby_points)
combined_selected <- rbind(selected_points, nearby_points)
#plots data
x <- nearby_points$Date_Time
y <- nearby_points$Low_Range
plot(x,y)
abline(h=mean)
nearby_points <- station1_slug[station1_slug$Date_Time < selected_points$Date_Time,]
#view(nearby_points)
combined_selected <- rbind(selected_points, nearby_points)
#plots data
x <- nearby_points$Date_Time
y <- nearby_points$Low_Range
plot(x,y)
nearby_points <- station1_slug[station1_slug$Date_Time > selected_points$Date_Time & 2>1,]
nearby_points <- station1_slug[(station1_slug$Date_Time > selected_points$Date_Time) & 2>1,]
nearby_points <- station1_slug[(station1_slug$Date_Time > selected_points$Date_Time) & TRUE,]
nearby_points <- station1_slug[(station1_slug$Date_Time > selected_points$Date_Time) && TRUE,]
#view(nearby_points)
combined_selected <- rbind(selected_points, nearby_points)
nearby_points <- station1_slug[station1_slug$Date_Time > min(selected_points$Date_Time) - 50 &
station1_slug$Date_Time < max(selected_points$Date_Time) + 50, ]
#view(nearby_points)
combined_selected <- rbind(selected_points, nearby_points)
#plots data
x <- nearby_points$Date_Time
y <- nearby_points$Low_Range
plot(x,y)
#expands range to include nearby points as well
distance_threshold <- 200
source("~/Desktop/Data+/macroGas/test.R")
source("~/Desktop/Data+/macroGas/test.R")
source("~/Desktop/Data+/macroGas/test.R")
source("~/Desktop/Data+/macroGas/test.R")
source("~/Desktop/Data+/macroGas/test.R")
source("~/Desktop/Data+/macroGas/test.R")
source("~/Desktop/Data+/macroGas/test.R")
source("~/Desktop/Data+/macroGas/test.R")
source("~/Desktop/Data+/macroGas/test.R")
source("~/Desktop/Data+/macroGas/test.R")
runApp('R-stuff')
source("~/Desktop/Data+/macroGas/FancyTrimming.R")
source("~/Desktop/Data+/macroGas/FancyTrimming.R")
source("~/Desktop/Data+/macroGas/FancyTrimming.R")
source("~/Desktop/Data+/macroGas/FancyTrimming.R")
source("~/Desktop/Data+/macroGas/FancyTrimming.R")
source("~/Desktop/Data+/macroGas/FancyTrimming.R")
source("~/Desktop/Data+/macroGas/FancyTrimming.R")
source("~/Desktop/Data+/macroGas/FancyTrimming.R")
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('test.R')
source("~/Desktop/Data+/macroGas/ui-test-stuff.R")
runApp('R-stuff')
runApp('R-stuff')
runApp('test.R')
runApp('test.R')
runApp('R-stuff')
runApp('test.R')
runApp('test.R')
runApp('R-stuff')
runApp('test.R')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
?button
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
div(
div(class = "tab",
actionButton(inputId = 'a',
class = "tablinks",
onclick = "openCity(event, 'London')",
id = "defaultOpen",
label = "Upload"),
actionButton(inputId = 'a',
class = "tablinks",
onclick = "openCity(event, 'Paris')",
label = "Flag"),
actionButton(inputId = 'a',
class = "tablinks",
onclick = "openCity(event, 'Tokyo')",
label = "Calculate")
),
div(inputId = 'a',
id = "Londfon",
class = "tabcontent",
h3("London"),
p("London is the capital city of England.")),
div(inputId = 'a',
id = "Parifs",
class = "tabcontent",
h3("Paris"),
p("Paris is the capital city of England.")),
div(inputId = 'a',
id = "Tokyfo",
class = "tabcontent",
h3("Tokyo"),
p("Tokyo is the capital city of England."))
)
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
source("~/Desktop/Data+/macroGas/R-stuff/navbar.R")
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
div(
div(class = 'block-thing')
# div(class = "tab",
#     actionButton(inputId = 'defaultOpen',
#                  class = "tablinks",
#                  onclick = "openCity(event, 'London')",
#                  label = "Upload"),
#     actionButton(inputId = 'a',
#                  class = "tablinks",
#                  onclick = "openCity(event, 'Paris')",
#                  label = "Flag"),
#     actionButton(inputId = 'a',
#                  class = "tablinks",
#                  onclick = "openCity(event, 'Tokyo')",
#                  label = "Calculate")
# ),
# div(inputId = 'a',
#     id = "Londfon",
#     class = "tabcontent",
#     h3("London"),
#     p("London is the capital city of England.")),
# div(inputId = 'a',
#     id = "Parifs",
#     class = "tabcontent",
#     h3("Paris"),
#     p("Paris is the capital city of England.")),
# div(inputId = 'a',
#     id = "Tokyfo",
#     class = "tabcontent",
#     h3("Tokyo"),
#     p("Tokyo is the capital city of England."))
)
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
source("~/Desktop/Data+/macroGas/R-stuff/home.R")
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
source("~/Desktop/Data+/macroGas/R-stuff/navbar.R")
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
source("~/Desktop/Data+/macroGas/updated_cleaning.R")
runApp('R-stuff')
runApp('test.R')
runApp('test.R')
iris
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
view(iris)
runApp('test.R')
runApp('test.R')
view(iris)
runApp('test.R')
# ggplot() with dummy data
x
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
dnorm
dnorm(x)
c(-3, 3)
p
# ggplot() with dummy data
p <- ggplot(data.frame(x = c(-3, 3)), aes(x = x))
p
# ggplot() with dummy data
p <- ggplot(data.frame(x = c(-3, 3)), aes(x = x, y = c(-1, 1)))
p
# ggplot() with dummy data
p <- ggplot(data.frame(x = c(-3, 3)), aes(x = x))
p +
stat_function(fun = dnorm_limit, geom = "area", fill = "blue", alpha = 0.2) +
stat_function(fun = dnorm)
#               fill = 'lightblue') +
#     geom_vline(xintercept = 5,
#                linetype = 'solid',
#                color = 'black',
#                size = 2) +
#     geom_vline(xintercept = 7,
#                linetype = 'solid',
#                color = 'black',
#                size = 2)
# })
output$plot <- renderPlot({
dnorm_limit <- function(x) {
y <- dnorm(x)
y[x < 0  |  x > 1] <- NA
return(y)
}
# ggplot() with dummy data
p <- ggplot(data.frame(x = c(-3, 3)), aes(x = x))
p +
stat_function(fun = dnorm_limit, geom = "area", fill = "blue", alpha = 0.2) +
stat_function(fun = dnorm)
})
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
func <- data.frame(c(0,1,2,3,4,5,6,7))
func
func <- data.frame(c(0,1,2,3,4,5,6,7), c(0,1,2,3,4,5,6,7))
func
x = c(0,1,2,3,4,5,6,7)
y = c(0,1,2,3,4,5,6,7)
func <- data.frame(x, y)
func
func <- data.frame(x, y)
func
print(func)
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
shiny::runApp('R-stuff')
source("~/Desktop/Data+/macroGas/salt slug app/updated_cleaning.R", echo=TRUE)
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt_slug_app/R-stuff')
runApp('salt slug app/R-stuff')
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
runApp('salt_slug_app/R-stuff')
library(tidyverse)
library(readr)
data <- read.csv("data.csv", header = FALSE)
data <- read.csv("example.csv", header = FALSE)
library(readr)
data <- read.csv("example.csv", header = FALSE)
data <- read.csv("./gas_app/example.csv", header = FALSE)
shiny::runApp('salt_slug_app/R-stuff')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
runApp('gas_app/gasapp.R')
